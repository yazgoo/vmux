#!/bin/env bash
script_dir=$(dirname  "${BASH_SOURCE[0]}")
generate_md_and_args() {
  presentation_root=$script_dir
  presentation_yml="$presentation_root"/presentation.yml
  if [ -e "$args_file" ]
  then
    if [ $(date +%s -r "$args_file") -gt $(date +%s -r "$presentation_yml") ]
    then
      return
    fi
  fi
  tmp_init_vim="/tmp/tmp.neovimconf.init.vim"
  args="-u $tmp_init_vim "
  get_page() {
    yq -r <"$presentation_yml" ".[\"$(echo $1 | sed 's/^[^ ]\+ //')\"].$2" 
  }
  rm -f "$args_file"
  split=$(get_page "$1" split)
  if [ "$split" != null ]
  then
    args="$args -$split"
  fi

  img=$(get_page "$1" img)
  if [ "$img" != null ]
  then
    echo IMG_PATH="$presentation_root/img/$img" >> "$args_file"
    args="$args term://$presentation_root/render_img "
  fi

  term=$(get_page "$1" term | sed 's;presentation_root;'$presentation_root';')
  if [ "$term" != null ]
  then
    args="$args term://$term "
  fi


  render_file="/tmp/tmp.neovimconf.$_hash.md"
  (
  echo $1
  echo $1 | sed 's/./=/g'
  echo
  get_page "$1" text
  )> "$render_file"
  args=$(echo "$args" | sed 's/ \+/ /g')

  postargs=""
  bterm=$(get_page "$1" bterm | sed 's;presentation_root;'$presentation_root';')
  if [ "$bterm" != null ]
  then
    postargs=" term://$bterm "
  fi

  _command=$(get_page "$1" command)
  if [ "$bterm" != null ]
  then
    postargs="$postargs -c $_command "
  fi

  echo VMUX_ADDITIONAL_ARGUMENTS="$args $render_file$postargs" | sed 's/  / /g' | sed 's/ $//' >> "$args_file"
}

die() {
  echo "$@"
  return
}

check_bin_exists() {
  which $1 &>/dev/null || die "please install $1 (cargo install $1)"
}

check_bin_exists blockish
check_bin_exists blockishfire

echo "downloading images..."
[ -e $script_dir/img/scalameta-logo.png ] || (cd $(dirname $0)/img/; wget https://scalameta.org/metals/img/scalameta-logo.png)
[ -e $script_dir/img/tmux-logo-medium.png ] || (cd $(dirname $0)/img/; wget https://github.com/tmux/tmux/raw/master/logo/tmux-logo-medium.png)
[ -e $script_dir/img/barcode.png ] || (cd $(dirname $0)/img/; qrencode --foreground=000000 --background=ffffff -o barcode.png https://github.com/yazgoo/vmux)
echo "generating conf..."
original_init_vim="$script_dir/../../docker/init.vim"
tmp_init_vim="/tmp/tmp.neovimconf.init.vim"
(cat "$original_init_vim"
echo "
set termguicolors
hi! link StatusLine Normal
hi! link StatusLineNC Normal
set statusline=%{repeat(' ',winwidth('.'))}
set fillchars+=eob: 
set fillchars+=vert: 
set laststatus=0
set nofoldenable
set cmdheight=0
"
) > "$tmp_init_vim"
echo "generating args and markdown..."
mapfile -t < <($script_dir/conf/hooks/list_sessions_names.sh)
pids=""
for session in "${MAPFILE[@]}" 
do
  export _hash=$(echo "$session" | md5sum | cut -d\  -f1)
  export args_file="/tmp/tmp.neovimconf.$_hash.args"
  generate_md_and_args "$session" &
  pids="$pids $!"
done
for pid in $pids
do
  wait $pid 2>/dev/null
done
while true
do
  echo "please adjust terminal size"
  l=$(tput lines)
  if [ $l -eq 26 ]
  then
    echo "terminal size ok"
    break
  fi
  echo got $l lines, expected 26, press enter to continue
  read
done

export LANG=C
alias vmux="vmux -c $script_dir/conf -s NeovimConf"
echo "run 'vmux new'"
