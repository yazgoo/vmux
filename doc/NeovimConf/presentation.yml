---
vmux:
  split: O
  img: barcode.png
  text: |
    a 5 year journey using neovim 
    =============================
    as a terminal multiplexer
    ==========================
presentation:
  split: O
  term: blockishfire
  text: |
    Who am I: 
      Olivier 'Yazgoo' Abdesselam 
      Data engineer @teads.tv

      - a basic vim user
      - to toy with terminal emulators ðŸ–¥
      - love rust ðŸ¦€  
The old times:
  split: o
  img: tmux-logo-medium.png
  text: |
    - no terminal in (neo)vim
    - I used tmux ðŸ’• + vim
    - tmux provides:
      - 'panes' (splits)
      - 'windows' (tabs)
      - 'sessions' (detach)
revolution: 
  split: o
  term: presentation_root/clean_bash
  text: |
    nvim, 2015: https://github.com/neovim/neovim/pull/2076
    `:help terminal`
    ```
    Terminal emulator				*terminal* *terminal-emulator*

    Nvim embeds a VT220/xterm terminal emulator based on libvterm.
    ```

    also vim, 2018
Main limitation:
  split: O
  term: presentation_root/long_lines_limit
  text: |
    copy terminal buffer with line wrapping

    - https://github.com/neovim/neovim/issues/2514
    - https://github.com/neovim/neovim/pull/11014
I decide to use it:
  split: o
  term: presentation_root/terminal_text_to_copy
  text : |
    2017: https://yazgoo.github.io/blag/neovim/terminal/multiplexer/tmux/2017/11/29/neovim-one-week-without-tmux.html

    - exit terminal easily (double escape): `tnoremap <Esc><Esc> <C-\><C-n>`
    - zoom: Plug 'dhruvasagar/vim-zoom'
    - copy pasting: `y` `p` work, can use `+` register.
    - completion: `^n`
    - detach : just wrap your session in dtach, screen, abduco: https://github.com/martanne/abduco
neovim server mode:
  split: o
  term: presentation_root/demo_server_mode
  text: |
    - control vim within terminal via server mode:
        ```vim
        " open named pipe and listen to RPC messages
        let g:server_addr = serverstart('/tmp/vim-server')
        ```

        define a CLI to send vim command `vmux-send`
        ```python
        nvim = neovim.attach('socket', path='/tmp/vim-server')
        nvim.command(" ".join(sys.argv[1:]))
        ```
alias:
  split: O
  img: vmux.png
  text: |
      ```bash
      # use abduco to emulate detach
      alias vmux="(abduco -l|grep nvim-session) || \
          rm -f /tmp/vim-server;\
          abduco -e '^g' -A nvim-session nvim --cmd \
          \"let g:server_addr = serverstart('/tmp/vim-server')\""
      ```

      And thus, vmux was born ðŸŽ‰  
vmux basics demo:
  split: O
  term: bash
  text: |
    - vmux
    - vmux new
    - vsplit +terminal
    - rsplit my_file
    - cd
    - tabnew +terminal
    - crontab -e  | git rebase
    - detach with ^G
    - vmux list
    - vmux attach
    - stop session by quitting vim
2022, why change ?:
  text: |
    before: I mostly used the same nvim instance

    I use more and more LSPs
    scala: https://scalameta.org/metals/
    rust: https://github.com/rust-analyzer/lsp-server

    multiple LSP in one vim instance was not a good experience.

    after: facilitate using multiple instances and switching 
2022 2:
  text: |
    ðŸ¦€ rust rewrite

    before: multiple binaries required
    after: one self-contained binary:

    relies on:
      - wallpapers are displayed via [blockish](https://github.com/yazgoo/blockish/)
      - fuzzy prompting done via [skim](https://github.com/lotabout/skim/)
      - BAcked Up Sorter : [baus](https://github.com/yazgoo/baus)
      - abduco replaced with: [diss](https://github.com/yazgoo/diss)
about diss:
  split: O
  term: presentation_root/diss
  text: |
    Diss:

    - dissociates a program from current terminal
    - is like :
        - [dtach](https://github.com/crigler/dtach)
        - [abduco](https://github.com/martanne/abduco)
    - is also a rust crate you can easily integrate !
vmux customization:
  text: |

    ## list sessions names

    You can define a list of new session names via `~/.config/vmux/hooks/list_sessions_names.sh`
    ```bash
    find -L ~/dev -maxdepth 1 -mindepth 1 -type d | while read d; do basename $d; done
    ```

    ## session setup

    setup a new session via `~/.config/vmux/hooks/session_name.sh`,

    ```bash
    mypwd=$HOME/dev/"$1"
    [ -e "$mypwd" ] && echo PWD="$mypwd"
    ```

    ## wallpaper

    You can put images which will be used as wallpapers inside `~/.config/vmux/wallpapers/`.

